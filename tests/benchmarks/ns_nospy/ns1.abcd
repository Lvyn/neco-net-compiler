buffer nw : object = ()
from dolev_yao import *

net Alice (this, peer) :
    buffer nonce : Nonce = ()
    [nw+("crypt", ("pub", peer), this, Nonce(this))]
    ; [nw-("crypt", ("pub", this), Na, Nb), nonce+(Nb) if Na == Nonce(this)]
    ; [nonce?(Nb), nw+("crypt", ("pub", peer), Nb)]

net Bob (this) :
    buffer peer : int = ()
    buffer nonce : Nonce = ()
    [nw-("crypt", ("pub", this), A,  Na), peer+(A), nonce+(Na)]
    ; [peer?(A), nonce?(Na), nw+("crypt", ("pub", A),  Na, Nonce(this))]
    ; [nw-("crypt", ("pub", this), Nb) if Nb == Nonce(this)]

net Mallory (this, init) :
    buffer knowledge : object = (this, Nonce(this), ("priv", this)) + init
    buffer spy : object = Spy(("crypt", ("pub", int), int, Nonce),
                               ("crypt", ("pub", int), Nonce, Nonce),
                               ("crypt", ("pub", int), Nonce))
    ([spy?(s), nw-(m), knowledge>>(k), knowledge<<(s.learn(m, k))]
     ; ([True] + [spy?(s), knowledge?(x), nw+(x) if s.message(x)]))
    * [False]

# scenario 1
#Alice(1, 3) | Bob(2)
#| Mallory(3, (1, ("pub", 1), 2, ("pub", 2)))

# scenario 2
#Alice(1, 3) | Bob(2)
#| Alice(3, 4) | Bob(4)
#| Mallory(5, tuple(range(5) + [("pub", i) for i in range(5)]))

# scenario 3
Alice(1, 2) | Bob(2)
# | Alice(3, 4) | Bob(4)
# | Alice(5, 6) | Bob(6)
# | Alice(7, 8) | Bob(8)
# | Alice(9, 10) | Bob(10)
# | Alice(10, 11) | Bob(11)

##### without DY attacker: n sessions => 7**n states
#| Mallory(7, tuple(range(7) + [("pub", i) for i in range(7)]))
