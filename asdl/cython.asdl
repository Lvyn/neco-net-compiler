module Python version "$Revision: SNAKES $"
{
	mod = Module(stmt* body)
	    | Interactive(stmt* body)
	    | Expression(expr body)
	    | Suite(stmt* body)

	stmt = FunctionDef(identifier name,
                           arguments args,
                           stmt* body,
                           expr? returns,
                           language lang,
                           CVar* decl)

	      | FunctionDecl(identifier name,
			     arguments args,
			     expr? returns,
			     language lang)

	      | ClassDef(identifier name,
			 expr* bases,
			 stmt* body,
			 language lang,
			 type_name_spec? spec,
                         CVar* decl)
              | cdecl
	      | Return(expr? value)

	      | Delete(expr* targets)
	      | Assign(expr* targets, expr value)
	      | AugAssign(expr target, operator op, expr value)

	      | For(expr target, expr iter, stmt* body, stmt* orelse)
	      | CFor(int start, cmpop start_op,
                     name target,
                     cmpop stop_op, int stop,
		     stmt* body)
	      | While(expr test, stmt* body, stmt* orelse)
	      | If(expr test, stmt* body, stmt* orelse)
	      | With(expr context_expr, expr? optional_vars, stmt* body)

	      | Raise(expr? exc, expr? cause)
	      | TryExcept(stmt* body, excepthandler* handlers, stmt* orelse)
	      | TryFinally(stmt* body, stmt* finalbody)
	      | Assert(expr test, expr? msg)

	      | Import(alias* names)
	      | ImportFrom(identifier module, alias* names, int? level)
              | CImport(identifier* names)
	      | CImportFrom(identifier module, identifier* names)
              | Extern(identifier type, identifier name, arg* args)
              | ExternFrom(string? hfile, cdecl* body)

	      | Exec(expr body, expr? globals, expr? locals)

	      | Global(identifier* names)
	      | Nonlocal(identifier* names)
	      | Expr(expr value)
	      | Pass | Break | Continue
	      | Comment(str message)
	      | NComment(str message)
	      | Print(expr? dest, expr* values, bool nl)

	      attributes (int lineno, int col_offset)

	expr = BoolOp(boolop op, expr* values)
	     | BinOp(expr left, operator op, expr right)
	     | UnaryOp(unaryop op, expr operand)
	     | Lambda(arguments args, expr body)
	     | IfExp(expr test, expr body, expr orelse)
	     | Dict(expr* keys, expr* values)
	     | Set(expr* elts)
	     | ListComp(expr elt, comprehension* generators)
	     | SetComp(expr elt, comprehension* generators)
	     | DictComp(expr key, expr value, comprehension* generators)
	     | GeneratorExp(expr elt, comprehension* generators)
	     -- | Yield(expr? value)
	     | Compare(expr left, cmpop* ops, expr* comparators)
	     | Call(expr func, expr* args, keyword* keywords,
			 expr? starargs, expr? kwargs)
	     | Num(object n)
	     | Str(string s)
	     | Ellipsis

	     | Attribute(expr value, identifier attr, expr_context ctx)
	     | Subscript(expr value, slice slice, expr_context ctx)
	     | Starred(expr value, expr_context ctx)
	     | Name(identifier id, expr_context ctx)
	     | List(expr* elts, expr_context ctx)
	     | Tuple(expr* elts, expr_context ctx)

   	     | Cast(str target, expr value)

	      attributes (int lineno, int col_offset)

	expr_context = Load | Store | Del | AugLoad | AugStore | Param

	slice = Slice(expr? lower, expr? upper, expr? step)
	      | ExtSlice(slice* dims)
	      | Index(expr value)

	boolop = And | Or

	operator = Add | Sub | Mult | Div | Mod | Pow | LShift
                 | RShift | BitOr | BitXor | BitAnd | FloorDiv

        ----------------------------------------------------------------
        -- Cython specific nodes
        ----------------------------------------------------------------
	language = CDef(bool? public, bool? api) | Def | CpDef(bool? public, bool? api)
	type_name_spec = (identifier o, identifier t)
        cdecl = CVar(identifier name,
                     identifier type,
                     expr? init,
                     bool? public,
                     bool? inner)
              | CFunction(identifier type, identifier name, arg* args)
              | CStruct(identifier name, CVar* body,
                        bool? public, bool? inner)
        ----------------------------------------------------------------

	unaryop = Invert | Not | UAdd | USub

	cmpop = Eq | NotEq | Lt | LtE | Gt | GtE | Is | IsNot | In | NotIn

	comprehension = (expr target, expr iter, expr* ifs)

	excepthandler = ExceptHandler(expr? type, identifier? name, stmt* body)
	                attributes (int lineno, int col_offset)

	arguments = (arg* args, identifier? vararg, expr? varargannotation,
                     arg* kwonlyargs, identifier? kwarg,
                     expr? kwargannotation, expr* defaults,
                     expr* kw_defaults)
	arg = (identifier arg, expr? annotation)

        keyword = (identifier arg, expr value)

        alias = (identifier name, identifier? asname)
}
